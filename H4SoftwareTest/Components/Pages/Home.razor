@page "/"
@using Newtonsoft.Json
@inject Codes.RoleHandler _roleHandler
@inject IServiceProvider _serviceProvider
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject Models.Context.TodoContext _todoContext
@inject Codes.EncryptionHandler _encryptionHandler

<PageTitle>Home</PageTitle>

@if (_isAuthenticated)
{
    <div style="display: grid; place-items: center;">
        <h2>@UserName</h2>

        @if (CprFromDB == null)
        {
            <div style="margin-bottom: 10px;">
                <div>Type your cpr-nr:</div>
                <div style="display: flex; align-items: center;">
                    <input type="text" @bind="@CprNr" style="width:160px;height:35px;" />
                    <button style="height:35px; border-radius: 5px;background-color:blue;color:black;border:none;cursor:pointer;" @onclick="SubmitCpr">Submit</button>
                </div>
                @if (Message != null)
                {
                    <div>
                        @CprMessage
                    </div>
                }
            </div>
        }
        else
        {
            <div style="margin-bottom: 10px;">
                <div>Todo item</div>
                <div style="display: flex; align-items: center;">
                    <input type="text" @bind="ToDoItem" style="width:150px;height:35px;" />
                    <button @onclick="SubmitTodoItemAsymmetric" style="height:35px; border-radius: 5px;background-color:blue;color:black;border:none;cursor:pointer;">Submit Item Asymmetric</button>
                    <button @onclick="SubmitTodoItemSymmetric" style="height:35px; border-radius: 5px;background-color:blue;color:black;border:none;cursor:pointer;">Submit Item Symmetric</button>
                </div>
                @if (Message != null)
                {
                    <div>
                        @Message
                    </div>
                }
            </div>

            <div style="overflow-y: auto; width: 100%;">
                @if (TodoList != null && TodoList.Count > 0)
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>My to do items</th>
                                @if (_isAdmin)
                                {
                                    <th>Action</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in TodoList)
                            {
                                <tr>
                                    @if (item.IsAsymmetric == true)
                                    {
                                        <td>@_encryptionHandler.DecryptAsymmetric(@item.Item)</td>
                                        @if (_isAdmin)
                                        {
                                            <td><button @onclick="() => DeleteTodoItem(item.Id)" style="border-radius: 5px;background-color:red;color:black;border:none;padding:5px 20px;cursor:pointer;">Delete</button></td>
                                        }
                                    }
                                    else @if (item.IsAsymmetric == false)
                                    {
                                        <td>@_encryptionHandler.DecryptSymmetric(@item.Item)</td>
                                        @if (_isAdmin)
                                        {
                                            <td><button @onclick="() => DeleteTodoItem(item.Id)" style="border-radius: 5px;background-color:red;color:black;border:none;padding:5px 20px;cursor:pointer;">Delete</button></td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        }
    </div>
}
else if (!_isAuthenticated)
{
    <div style="text-align:center;">
        <h2>Not logged in</h2>
        <div>
            <p>
                It's sadly been spotted that you haven't logged in
            </p>

            <div style="margin-top: 10px;">
                Please press this button to return to login :D
                <br />
                <button @onclick="NavigateToLogin"
                        style="border-radius: 5px;background-color:blue;color:black;border:none;padding:5px 20px;cursor:pointer;">
                    Login
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string? UserName { get; set; }
    private string? CprNr { get; set; }
    private string? CprFromDB { get; set; }
    private string? ToDoItem { get; set; } = "";
    private List<Models.Todolist>? TodoList { get; set; } = new List<Models.Todolist>();
    private string? Message { get; set; }
    private string? CprMessage { get; set; }
    public bool _isAuthenticated;
    public bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var currentUser = authState.User;
        UserName = authState.User.Identity.Name;
        _isAuthenticated = currentUser.Identity.IsAuthenticated;
        _isAdmin = currentUser.IsInRole("Admin");

        // if (_isAuthenticated)
        // {
        //     await _roleHandler.CreateUserRolesAsync(currentUser.Identity.Name, "Admin", _serviceProvider);
        // }
    }

    private void SubmitCpr()
    {
        string cprHashed = Codes.HashingHandler.BCryptHashing(CprNr);

        var matchedUser = _todoContext.Cprs.FirstOrDefault(x => x.User == UserName);
        if (matchedUser == null)
        {
            var cpr = new Models.Cpr
                {
                    User = UserName,
                    CprNr = cprHashed
                };
            _todoContext.Cprs.Add(cpr);
            _todoContext.SaveChanges();

            CprFromDB = _todoContext.Cprs.FirstOrDefault(x => x.User == UserName)?.CprNr;
        }
        else
        {
            bool hashedValueMatch = Codes.HashingHandler.BCryptVerifyHashing(CprNr, matchedUser.CprNr);
            if (hashedValueMatch)
            {
                TodoList = _todoContext.Todolists.ToList().Where(x => x.User == UserName).ToList();
                CprFromDB = _todoContext.Cprs.FirstOrDefault(x => x.User == UserName)?.CprNr;
                CprMessage = null;
            }
            else
            {
                CprMessage = "Cpr-nr er forkert!";
            }
        }
    }

    #region Asymmetric Todo
    private void SubmitTodoItemAsymmetric()
    {
        if (ToDoItem == null || ToDoItem == "")
        {
            Message = "Item needs data";
        }
        else
        {
            var todoListTemp = _todoContext.Todolists.ToList();
            todoListTemp = todoListTemp.Where(x => x.User == UserName).ToList();
            var todo = new Models.Todolist
                {
                    User = UserName,
                    Item = _encryptionHandler.EncryptAsymmetric(ToDoItem),
                    IsAsymmetric = true
        };
            _todoContext.Todolists.Add(todo);
            _todoContext.SaveChanges();

            TodoList = _todoContext.Todolists.ToList().Where(x => x.User == UserName).ToList();
            ToDoItem = "";
        }
    }
    #endregion

    #region Symmetric Todo
    private void SubmitTodoItemSymmetric()
    {
        if (ToDoItem == null || ToDoItem == "")
        {
            Message = "Item needs data";
        }
        else
        {
            var todoListTemp = _todoContext.Todolists.ToList();
            todoListTemp = todoListTemp.Where(x => x.User == UserName).ToList();
            var todo = new Models.Todolist
                {
                    User = UserName,
                    Item = _encryptionHandler.EncryptSymmetric(ToDoItem),
                    IsAsymmetric = false
                };
            _todoContext.Todolists.Add(todo);
            _todoContext.SaveChanges();

            TodoList = _todoContext.Todolists.ToList().Where(x => x.User == UserName).ToList();
            ToDoItem = "";
        }
    }
    #endregion

    private void DeleteTodoItem(int itemId)
    {
        var itemToDelete = TodoList.FirstOrDefault(x => x.Id == itemId);
        if (itemToDelete != null)
        {
            _todoContext.Todolists.Remove(itemToDelete);
            _todoContext.SaveChanges();
            TodoList.Remove(itemToDelete);
        }
    }

    private void NavigateToLogin()
    {
        _navigationManager.NavigateTo("account/login");
    }
}
